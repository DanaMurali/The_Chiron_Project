// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                  String         @id @default(cuid())
  name                String?
  email               String?        @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  career              String?
  jobRoleId           String?
  jobRole             JobRole?       @relation(fields: [jobRoleId], references: [id])
  biography           String?        @db.Text
  isMentor            Boolean?
  isMentee            Boolean?
  mentorRelationships Relationship[] @relation("MentorRelationship")
  menteeRelationships Relationship[] @relation("MenteeRelationship")
  mentorRequests      Request[]      @relation("MentorRequest")
  menteeRequests      Request[]      @relation("MenteeRequest")
}

model JobRole {
  id    String @id @default(cuid())
  name  String
  users User[]
}

model Relationship {
  id       String  @id @default(cuid())
  mentorId String?
  mentor   User?   @relation("MentorRelationship", fields: [mentorId], references: [id])
  menteeId String?
  mentee   User?   @relation("MenteeRelationship", fields: [menteeId], references: [id])
}

model Request {
  id       String  @id @default(cuid())
  mentorId String?
  mentor   User?   @relation("MentorRequest", fields: [mentorId], references: [id])
  menteeId String?
  mentee   User?   @relation("MenteeRequest", fields: [menteeId], references: [id])
}
